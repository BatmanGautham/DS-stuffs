#include <stdio.h>

 int i, j, k;

void merge(int A[], int p, int q, int r) 
{
 int n1 = q - p + 1;
 int n2 = r - q;

 int L[n1], M[n2];

  for ( i = 0; i < n1; i++)
   {
    L[i] = A[p + i];
   }
   
  for ( j = 0; j < n2; j++)
   {
    M[j] = A[q + 1 + j];
   }


  i = 0;
  j = 0;
  k = p;


   while (i < n1 && j < n2) 
    {
      if (L[i] <= M[j]) 
       {
         A[k] = L[i];
         i++;
       } 
   
    else 
     {
      A[k] = M[j];
      j++;
     }
    k++;
  }

  while (i < n1) 
   {
    A[k] = L[i];
    i++;
    k++;
   }

  while (j < n2) 
   {
    A[k] = M[j];
    j++;
    k++;
   }
}


void mergeSort(int A[], int l, int r) 
{
  if (l < r) 
   { 
    int m = l + (r - l) / 2;

    mergeSort(A, l, m);
    mergeSort(A, m + 1, r);

    merge(A, l, m, r);
  }
}


void printArray(int A[], int size) 
{
  for (int i = 0; i < size; i++)
   {
    printf("%d ", A[i]);
   }
  printf("\n\n");
}


int main() 
{
 int A[] = {6, 5, 12, 10, 9, 1};
 int n = sizeof(A) / sizeof(A[0]);

   
 printf("\nMerge Sort \n\nUnsorted array is \n");
 printArray(A,n);
 
 mergeSort(A, 0, n - 1);

 printf("\nSorted array: \n");
 printArray(A, n);
}
